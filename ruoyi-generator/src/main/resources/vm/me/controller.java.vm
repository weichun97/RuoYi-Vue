package ${packageName}.${moduleName}.controller;

import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.api.Response;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.mybatis.FgocPage;
import com.ruoyi.common.mybatis.PageParam;
import ${packageName}.${moduleName}.entity.param.${classname}.${ClassName}QueryParam;
import ${packageName}.${moduleName}.entity.param.${classname}.${ClassName}SaveOrUpdateParam;
import ${packageName}.${moduleName}.entity.vo.${classname}.${ClassName}DetailVO;
import ${packageName}.${moduleName}.entity.vo.${classname}.${ClassName}QueryVO;
import ${packageName}.${moduleName}.service.${ClassName}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

@Api(value = "${ClassName}Controller", tags = "${functionName}")
@RequestMapping("${moduleName}/${className}")
@RestController
public class ${ClassName}Controller {

    @Resource
    private ${ClassName}Service ${className}Service;

    @ApiOperation("分页")
    @GetMapping("query")
    public Response<FgocPage<${ClassName}QueryVO>> query(PageParam pageParam, ${ClassName}QueryParam ${className}QueryParam) {
        return Response.success(${className}Service.query(pageParam, ${className}QueryParam));
    }

    @ApiOperation("导出")
    @PreAuthorize("@ss.hasPermi('${moduleName}:${className}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("export")
    public void export(HttpServletResponse response, ${ClassName}QueryParam ${className}QueryParam)
    {
        ${className}Service.export(response, ${className}QueryParam);
    }

    @ApiOperation("详情")
    @GetMapping("{id}")
    public Response<${ClassName}DetailVO> detail(@PathVariable Long id){
        return Response.success(${className}Service.detail(id));
    }

    @ApiOperation("保存")
    @PostMapping
    public Response save(@Valid @RequestBody ${ClassName}SaveOrUpdateParam saveOrUpdateParam){
        ${className}Service.save(saveOrUpdateParam);
        return Response.success();
    }

    @ApiOperation("更新")
    @PutMapping("{id}")
    public Response update(@PathVariable Long id, @Valid @RequestBody ${ClassName}SaveOrUpdateParam saveOrUpdateParam){
        ${className}Service.update(id, saveOrUpdateParam);
        return Response.success();
    }

    @ApiOperation("删除")
    @DeleteMapping("{ids}")
    public Response remove(@PathVariable Long[] ids){
        ${className}Service.remove(ids);
        return Response.success();
    }
}